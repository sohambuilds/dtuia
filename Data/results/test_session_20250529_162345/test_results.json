{
  "summary": {
    "timestamp": "2025-05-29T16:26:59.566337",
    "total_programs": 41,
    "successful": 33,
    "failed": 8,
    "success_rate": 0.8048780487804879,
    "average_test_success_rate": 0.8447154471544716
  },
  "detailed_results": [
    {
      "program": "bitcount",
      "status": "success",
      "total_tests": 9,
      "passed_tests": 9,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "BITWISE_OPERATOR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            127
          ],
          "fixed_output": "7",
          "correct_output": "7",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            128
          ],
          "fixed_output": "1",
          "correct_output": "1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            3005
          ],
          "fixed_output": "9",
          "correct_output": "9",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            13
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            14
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            27
          ],
          "fixed_output": "4",
          "correct_output": "4",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            834
          ],
          "fixed_output": "4",
          "correct_output": "4",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            254
          ],
          "fixed_output": "7",
          "correct_output": "7",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            256
          ],
          "fixed_output": "1",
          "correct_output": "1",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "breadth_first_search",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "bucketsort",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "VARIABLE_MISUSE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [],
            14
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3,
              11,
              2,
              9,
              1,
              5
            ],
            12
          ],
          "fixed_output": "[1, 2, 3, 5, 9, 11]",
          "correct_output": "[1, 2, 3, 5, 9, 11]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              3,
              2,
              4,
              2,
              3,
              5
            ],
            6
          ],
          "fixed_output": "[2, 2, 3, 3, 4, 5]",
          "correct_output": "[2, 2, 3, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              1,
              3,
              4,
              6,
              4,
              2,
              9,
              1,
              2,
              9
            ],
            10
          ],
          "fixed_output": "[1, 1, 2, 2, 3, 4, 4, 6, 9, 9]",
          "correct_output": "[1, 1, 2, 2, 3, 4, 4, 6, 9, 9]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              20,
              19,
              18,
              17,
              16,
              15,
              14,
              13,
              12,
              11
            ],
            21
          ],
          "fixed_output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
          "correct_output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29
            ],
            30
          ],
          "fixed_output": "[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
          "correct_output": "[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              8,
              5,
              3,
              1,
              9,
              6,
              0,
              7,
              4,
              2,
              5
            ],
            10
          ],
          "fixed_output": "[0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9]",
          "correct_output": "[0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "depth_first_search",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "detect_cycle",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "find_first_in_sorted",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "LOOP_CONDITION",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              3,
              4,
              5,
              5,
              5,
              5,
              6
            ],
            5
          ],
          "fixed_output": "2",
          "correct_output": "2",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3,
              4,
              5,
              5,
              5,
              5,
              6
            ],
            7
          ],
          "fixed_output": "-1",
          "correct_output": "-1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              3,
              4,
              5,
              5,
              5,
              5,
              6
            ],
            2
          ],
          "fixed_output": "-1",
          "correct_output": "-1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              3,
              6,
              7,
              9,
              9,
              10,
              14,
              27
            ],
            14
          ],
          "fixed_output": "6",
          "correct_output": "6",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              0,
              1,
              6,
              8,
              13,
              14,
              67,
              128
            ],
            80
          ],
          "fixed_output": "-1",
          "correct_output": "-1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              0,
              1,
              6,
              8,
              13,
              14,
              67,
              128
            ],
            67
          ],
          "fixed_output": "6",
          "correct_output": "6",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              0,
              1,
              6,
              8,
              13,
              14,
              67,
              128
            ],
            128
          ],
          "fixed_output": "7",
          "correct_output": "7",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "find_in_sorted",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "OFF_BY_ONE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              3,
              4,
              5,
              5,
              5,
              5,
              6
            ],
            5
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              1,
              2,
              3,
              4,
              6,
              7,
              8
            ],
            5
          ],
          "fixed_output": "-1",
          "correct_output": "-1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              1,
              2,
              3,
              4,
              6,
              7,
              8
            ],
            4
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              2,
              4,
              6,
              8,
              10,
              12,
              14,
              16,
              18,
              20
            ],
            18
          ],
          "fixed_output": "8",
          "correct_output": "8",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              3,
              5,
              6,
              7,
              8,
              9,
              12,
              13,
              14,
              24,
              26,
              27
            ],
            0
          ],
          "fixed_output": "-1",
          "correct_output": "-1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              3,
              5,
              6,
              7,
              8,
              9,
              12,
              12,
              14,
              24,
              26,
              27
            ],
            12
          ],
          "fixed_output": "6",
          "correct_output": "6",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              24,
              26,
              28,
              50,
              59
            ],
            101
          ],
          "fixed_output": "-1",
          "correct_output": "-1",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "flatten",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "INCORRECT_RETURN",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              [
                1,
                [],
                [
                  2,
                  3
                ]
              ],
              [
                [
                  4
                ]
              ],
              5
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              [],
              [],
              [],
              [],
              []
            ]
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              [],
              [],
              1,
              [],
              1,
              [],
              []
            ]
          ],
          "fixed_output": "[1, 1]",
          "correct_output": "[1, 1]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              1,
              2,
              3,
              [
                [
                  4
                ]
              ]
            ]
          ],
          "fixed_output": "[1, 2, 3, 4]",
          "correct_output": "[1, 2, 3, 4]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              1,
              4,
              6
            ]
          ],
          "fixed_output": "[1, 4, 6]",
          "correct_output": "[1, 4, 6]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              "moe",
              "curly",
              "larry"
            ]
          ],
          "fixed_output": "['moe', 'curly', 'larry']",
          "correct_output": "['moe', 'curly', 'larry']",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              "a",
              "b",
              [
                "c"
              ],
              [
                "d"
              ],
              [
                [
                  "e"
                ]
              ]
            ]
          ],
          "fixed_output": "['a', 'b', 'c', 'd', 'e']",
          "correct_output": "['a', 'b', 'c', 'd', 'e']",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "gcd",
      "status": "success",
      "total_tests": 6,
      "passed_tests": 6,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "ARGUMENT_ORDER",
      "tests": [
        {
          "test_num": 1,
          "input": [
            17,
            0
          ],
          "fixed_output": "17",
          "correct_output": "17",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            13,
            13
          ],
          "fixed_output": "13",
          "correct_output": "13",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            37,
            600
          ],
          "fixed_output": "1",
          "correct_output": "1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            20,
            100
          ],
          "fixed_output": "20",
          "correct_output": "20",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            624129,
            2061517
          ],
          "fixed_output": "18913",
          "correct_output": "18913",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            3,
            12
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "get_factors",
      "status": "success",
      "total_tests": 11,
      "passed_tests": 11,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "INCORRECT_RETURN",
      "tests": [
        {
          "test_num": 1,
          "input": [
            1
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            100
          ],
          "fixed_output": "[2, 2, 5, 5]",
          "correct_output": "[2, 2, 5, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            101
          ],
          "fixed_output": "[101]",
          "correct_output": "[101]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            104
          ],
          "fixed_output": "[2, 2, 2, 13]",
          "correct_output": "[2, 2, 2, 13]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            2
          ],
          "fixed_output": "[2]",
          "correct_output": "[2]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            3
          ],
          "fixed_output": "[3]",
          "correct_output": "[3]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            17
          ],
          "fixed_output": "[17]",
          "correct_output": "[17]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            63
          ],
          "fixed_output": "[3, 3, 7]",
          "correct_output": "[3, 3, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            74
          ],
          "fixed_output": "[2, 37]",
          "correct_output": "[2, 37]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            73
          ],
          "fixed_output": "[73]",
          "correct_output": "[73]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 11,
          "input": [
            9837
          ],
          "fixed_output": "[3, 3, 1093]",
          "correct_output": "[3, 3, 1093]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "hanoi",
      "status": "success",
      "total_tests": 8,
      "passed_tests": 8,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "VARIABLE_MISUSE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            0,
            1,
            3
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            1,
            1,
            3
          ],
          "fixed_output": "[(1, 3)]",
          "correct_output": "[(1, 3)]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            2,
            1,
            3
          ],
          "fixed_output": "[(1, 2), (1, 3), (2, 3)]",
          "correct_output": "[(1, 2), (1, 3), (2, 3)]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            3,
            1,
            3
          ],
          "fixed_output": "[(1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3)]",
          "correct_output": "[(1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3)]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            4,
            1,
            3
          ],
          "fixed_output": "[(1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3)]",
          "correct_output": "[(1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2), (1, 3), (2, 3), (2, 1), (3, 1), (2, 3), (1, 2), (1, 3), (2, 3)]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            2,
            1,
            2
          ],
          "fixed_output": "[(1, 3), (1, 2), (3, 2)]",
          "correct_output": "[(1, 3), (1, 2), (3, 2)]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            2,
            1,
            1
          ],
          "fixed_output": "[(1, 2), (1, 1), (2, 1)]",
          "correct_output": "[(1, 2), (1, 1), (2, 1)]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            2,
            3,
            1
          ],
          "fixed_output": "[(3, 2), (3, 1), (2, 1)]",
          "correct_output": "[(3, 2), (3, 1), (2, 1)]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "is_valid_parenthesization",
      "status": "success",
      "total_tests": 3,
      "passed_tests": 3,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "INCORRECT_RETURN",
      "tests": [
        {
          "test_num": 1,
          "input": [
            "((()()))()"
          ],
          "fixed_output": "True",
          "correct_output": "True",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            ")()("
          ],
          "fixed_output": "False",
          "correct_output": "False",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            "(("
          ],
          "fixed_output": "False",
          "correct_output": "False",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "kheapsort",
      "status": "success",
      "total_tests": 4,
      "passed_tests": 4,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "LOOP_CONDITION",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              1,
              2,
              3,
              4,
              5
            ],
            0
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3,
              2,
              1,
              5,
              4
            ],
            2
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              5,
              4,
              3,
              2,
              1
            ],
            4
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              3,
              12,
              5,
              1,
              6
            ],
            3
          ],
          "fixed_output": "[1, 3, 5, 6, 12]",
          "correct_output": "[1, 3, 5, 6, 12]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "knapsack",
      "status": "success",
      "total_tests": 10,
      "passed_tests": 10,
      "success_rate": 1.0,
      "timeout_count": 1,
      "defect_type": "COMPARISON_OPERATOR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            100,
            [
              [
                60,
                10
              ],
              [
                50,
                8
              ],
              [
                20,
                4
              ],
              [
                20,
                4
              ],
              [
                8,
                3
              ],
              [
                3,
                2
              ]
            ]
          ],
          "fixed_output": "19",
          "correct_output": "19",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            40,
            [
              [
                30,
                10
              ],
              [
                50,
                5
              ],
              [
                10,
                20
              ],
              [
                40,
                25
              ]
            ]
          ],
          "fixed_output": "30",
          "correct_output": "30",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            750,
            [
              [
                70,
                135
              ],
              [
                73,
                139
              ],
              [
                77,
                149
              ],
              [
                80,
                150
              ],
              [
                82,
                156
              ],
              [
                87,
                163
              ],
              [
                90,
                173
              ],
              [
                94,
                184
              ],
              [
                98,
                192
              ],
              [
                106,
                201
              ],
              [
                110,
                210
              ],
              [
                113,
                214
              ],
              [
                115,
                221
              ],
              [
                118,
                229
              ],
              [
                120,
                240
              ]
            ]
          ],
          "fixed_output": "1458",
          "correct_output": "1458",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            26,
            [
              [
                12,
                24
              ],
              [
                7,
                13
              ],
              [
                11,
                23
              ],
              [
                8,
                15
              ],
              [
                9,
                16
              ]
            ]
          ],
          "fixed_output": "51",
          "correct_output": "51",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            50,
            [
              [
                31,
                70
              ],
              [
                10,
                20
              ],
              [
                20,
                39
              ],
              [
                19,
                37
              ],
              [
                4,
                7
              ],
              [
                3,
                5
              ],
              [
                6,
                10
              ]
            ]
          ],
          "fixed_output": "107",
          "correct_output": "107",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            190,
            [
              [
                56,
                50
              ],
              [
                59,
                50
              ],
              [
                80,
                64
              ],
              [
                64,
                46
              ],
              [
                75,
                50
              ],
              [
                17,
                5
              ]
            ]
          ],
          "fixed_output": "150",
          "correct_output": "150",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            104,
            [
              [
                25,
                350
              ],
              [
                35,
                400
              ],
              [
                45,
                450
              ],
              [
                5,
                20
              ],
              [
                25,
                70
              ],
              [
                3,
                8
              ],
              [
                2,
                5
              ],
              [
                2,
                5
              ]
            ]
          ],
          "fixed_output": "900",
          "correct_output": "900",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            165,
            [
              [
                23,
                92
              ],
              [
                31,
                57
              ],
              [
                29,
                49
              ],
              [
                44,
                68
              ],
              [
                53,
                60
              ],
              [
                38,
                43
              ],
              [
                63,
                67
              ],
              [
                85,
                84
              ],
              [
                89,
                87
              ],
              [
                82,
                72
              ]
            ]
          ],
          "fixed_output": "309",
          "correct_output": "309",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            170,
            [
              [
                41,
                442
              ],
              [
                50,
                525
              ],
              [
                49,
                511
              ],
              [
                59,
                593
              ],
              [
                55,
                546
              ],
              [
                57,
                564
              ],
              [
                60,
                617
              ]
            ]
          ],
          "fixed_output": "1735",
          "correct_output": "1735",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            6404180,
            [
              [
                382745,
                825594
              ],
              [
                799601,
                1677009
              ],
              [
                909247,
                1676628
              ],
              [
                729069,
                1523970
              ],
              [
                467902,
                943972
              ],
              [
                44328,
                97426
              ],
              [
                34610,
                69666
              ],
              [
                698150,
                1296457
              ],
              [
                823460,
                1679693
              ],
              [
                903959,
                1902996
              ],
              [
                853665,
                1844992
              ],
              [
                551830,
                1049289
              ],
              [
                610856,
                1252836
              ],
              [
                670702,
                1319836
              ],
              [
                488960,
                953277
              ],
              [
                951111,
                2067538
              ],
              [
                323046,
                675367
              ],
              [
                446298,
                853655
              ],
              [
                931161,
                1826027
              ],
              [
                31385,
                65731
              ],
              [
                496951,
                901489
              ],
              [
                264724,
                577243
              ],
              [
                224916,
                466257
              ],
              [
                169684,
                369261
              ]
            ]
          ],
          "fixed_output": "TIMEOUT",
          "correct_output": "TIMEOUT",
          "passed": true,
          "timeout": true
        }
      ]
    },
    {
      "program": "kth",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "ARITHMETIC_ERROR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            4
          ],
          "fixed_output": "5",
          "correct_output": "5",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3,
              6,
              7,
              1,
              6,
              3,
              8,
              9
            ],
            5
          ],
          "fixed_output": "7",
          "correct_output": "7",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              3,
              6,
              7,
              1,
              6,
              3,
              8,
              9
            ],
            2
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              2,
              6,
              8,
              3,
              5,
              7
            ],
            0
          ],
          "fixed_output": "2",
          "correct_output": "2",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              34,
              25,
              7,
              1,
              9
            ],
            4
          ],
          "fixed_output": "34",
          "correct_output": "34",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              45,
              2,
              6,
              8,
              42,
              90,
              322
            ],
            1
          ],
          "fixed_output": "6",
          "correct_output": "6",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              45,
              2,
              6,
              8,
              42,
              90,
              322
            ],
            6
          ],
          "fixed_output": "322",
          "correct_output": "322",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "lcs_length",
      "status": "success",
      "total_tests": 9,
      "passed_tests": 9,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "VARIABLE_MISUSE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            "witch",
            "sandwich"
          ],
          "fixed_output": "2",
          "correct_output": "2",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            "meow",
            "homeowner"
          ],
          "fixed_output": "4",
          "correct_output": "4",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            "fun",
            ""
          ],
          "fixed_output": "0",
          "correct_output": "0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            "fun",
            "function"
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            "cyborg",
            "cyber"
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            "physics",
            "physics"
          ],
          "fixed_output": "7",
          "correct_output": "7",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            "space age",
            "pace a"
          ],
          "fixed_output": "6",
          "correct_output": "6",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            "flippy",
            "floppy"
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            "acbdegcedbg",
            "begcfeubk"
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "levenshtein",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 1,
      "defect_type": "ARITHMETIC_ERROR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            "electron",
            "neutron"
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            "kitten",
            "sitting"
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            "rosettacode",
            "raisethysword"
          ],
          "fixed_output": "8",
          "correct_output": "8",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            "amanaplanacanalpanama",
            "docnoteidissentafastneverpreventsafatnessidietoncod"
          ],
          "fixed_output": "TIMEOUT",
          "correct_output": "TIMEOUT",
          "passed": true,
          "timeout": true
        },
        {
          "test_num": 5,
          "input": [
            "abcdefg",
            "gabcdef"
          ],
          "fixed_output": "2",
          "correct_output": "2",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            "",
            ""
          ],
          "fixed_output": "0",
          "correct_output": "0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            "hello",
            "olleh"
          ],
          "fixed_output": "4",
          "correct_output": "4",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "lis",
      "status": "failed",
      "total_tests": 12,
      "passed_tests": 8,
      "success_rate": 0.6666666666666666,
      "timeout_count": 0,
      "defect_type": "MISSING_CONDITION",
      "tests": [
        {
          "test_num": 1,
          "input": [
            []
          ],
          "fixed_output": "0",
          "correct_output": "0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3
            ]
          ],
          "fixed_output": "1",
          "correct_output": "1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              10,
              20,
              11,
              32,
              22,
              48,
              43
            ]
          ],
          "fixed_output": "4",
          "correct_output": "4",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              4,
              2,
              1
            ]
          ],
          "fixed_output": "1",
          "correct_output": "1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              5,
              1,
              3,
              4,
              7
            ]
          ],
          "fixed_output": "4",
          "correct_output": "4",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              4,
              1
            ]
          ],
          "fixed_output": "1",
          "correct_output": "1",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              -1,
              0,
              2
            ]
          ],
          "fixed_output": "3",
          "correct_output": "3",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            [
              0,
              2
            ]
          ],
          "fixed_output": "2",
          "correct_output": "2",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            [
              4,
              1,
              5,
              3,
              7,
              6,
              2
            ]
          ],
          "fixed_output": "2",
          "correct_output": "3",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            [
              10,
              22,
              9,
              33,
              21,
              50,
              41,
              60,
              80
            ]
          ],
          "fixed_output": "5",
          "correct_output": "6",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 11,
          "input": [
            [
              7,
              10,
              9,
              2,
              3,
              8,
              1
            ]
          ],
          "fixed_output": "1",
          "correct_output": "3",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 12,
          "input": [
            [
              9,
              11,
              2,
              13,
              7,
              15
            ]
          ],
          "fixed_output": "3",
          "correct_output": "4",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "longest_common_subsequence",
      "status": "success",
      "total_tests": 10,
      "passed_tests": 10,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "MISSING_STATEMENT",
      "tests": [
        {
          "test_num": 1,
          "input": [
            "headache",
            "pentadactyl"
          ],
          "fixed_output": "eadac",
          "correct_output": "eadac",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            "daenarys",
            "targaryen"
          ],
          "fixed_output": "aary",
          "correct_output": "aary",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            "XMJYAUZ",
            "MZJAWXU"
          ],
          "fixed_output": "MJAU",
          "correct_output": "MJAU",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            "thisisatest",
            "testing123testing"
          ],
          "fixed_output": "tsitest",
          "correct_output": "tsitest",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            "1234",
            "1224533324"
          ],
          "fixed_output": "1234",
          "correct_output": "1234",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            "abcbdab",
            "bdcaba"
          ],
          "fixed_output": "bcba",
          "correct_output": "bcba",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            "TATAGC",
            "TAGCAG"
          ],
          "fixed_output": "TAAG",
          "correct_output": "TAAG",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            "ABCBDAB",
            "BDCABA"
          ],
          "fixed_output": "BCBA",
          "correct_output": "BCBA",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            "ABCD",
            "XBCYDQ"
          ],
          "fixed_output": "BCD",
          "correct_output": "BCD",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            "acbdegcedbg",
            "begcfeubk"
          ],
          "fixed_output": "begceb",
          "correct_output": "begceb",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "max_sublist_sum",
      "status": "failed",
      "total_tests": 6,
      "passed_tests": 1,
      "success_rate": 0.16666666666666666,
      "timeout_count": 0,
      "defect_type": "INITIALIZATION_ERROR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              4,
              -5,
              2,
              1,
              -1,
              3
            ]
          ],
          "fixed_output": "4",
          "correct_output": "5",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              0,
              -1,
              2,
              -1,
              3,
              -1,
              0
            ]
          ],
          "fixed_output": "3",
          "correct_output": "4",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              3,
              4,
              5
            ]
          ],
          "fixed_output": "12",
          "correct_output": "12",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              4,
              -2,
              -8,
              5,
              -2,
              7,
              7,
              2,
              -6,
              5
            ]
          ],
          "fixed_output": "13",
          "correct_output": "19",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              -4,
              -4,
              -5
            ]
          ],
          "fixed_output": "-4",
          "correct_output": "0",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              -2,
              1,
              -3,
              4,
              -1,
              2,
              1,
              -5,
              4
            ]
          ],
          "fixed_output": "2",
          "correct_output": "6",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "mergesort",
      "status": "success",
      "total_tests": 14,
      "passed_tests": 14,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "COMPARISON_OPERATOR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            []
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              1,
              2,
              6,
              72,
              7,
              33,
              4
            ]
          ],
          "fixed_output": "[1, 2, 4, 6, 7, 33, 72]",
          "correct_output": "[1, 2, 4, 6, 7, 33, 72]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              3,
              1,
              4,
              1,
              5,
              9,
              2,
              6,
              5,
              3,
              5,
              8,
              9,
              7,
              9,
              3
            ]
          ],
          "fixed_output": "[1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9]",
          "correct_output": "[1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              5,
              4,
              3,
              2,
              1
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              5,
              4,
              3,
              1,
              2
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              8,
              1,
              14,
              9,
              15,
              5,
              4,
              3,
              7,
              17,
              11,
              18,
              2,
              12,
              16,
              13,
              6,
              10
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              9,
              4,
              5,
              2,
              17,
              14,
              10,
              6,
              15,
              8,
              12,
              13,
              16,
              3,
              1,
              7,
              11
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            [
              13,
              14,
              7,
              16,
              9,
              5,
              24,
              21,
              19,
              17,
              12,
              10,
              1,
              15,
              23,
              25,
              11,
              3,
              2,
              6,
              22,
              8,
              20,
              4,
              18
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            [
              8,
              5,
              15,
              7,
              9,
              14,
              11,
              12,
              10,
              6,
              2,
              4,
              13,
              1,
              3
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            [
              4,
              3,
              7,
              6,
              5,
              2,
              1
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 11,
          "input": [
            [
              4,
              3,
              1,
              5,
              2
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 12,
          "input": [
            [
              5,
              4,
              2,
              3,
              6,
              7,
              1
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 13,
          "input": [
            [
              10,
              16,
              6,
              1,
              14,
              19,
              15,
              2,
              9,
              4,
              18,
              17,
              12,
              3,
              11,
              8,
              13,
              5,
              7
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 14,
          "input": [
            [
              10,
              16,
              6,
              1,
              14,
              19,
              15,
              2,
              9,
              4,
              18
            ]
          ],
          "fixed_output": "[1, 2, 4, 6, 9, 10, 14, 15, 16, 18, 19]",
          "correct_output": "[1, 2, 4, 6, 9, 10, 14, 15, 16, 18, 19]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "minimum_spanning_tree",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "next_palindrome",
      "status": "success",
      "total_tests": 5,
      "passed_tests": 4,
      "success_rate": 0.8,
      "timeout_count": 0,
      "defect_type": "VARIABLE_MISUSE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              1,
              4,
              9,
              4,
              1
            ]
          ],
          "fixed_output": "[1, 5, 0, 5, 1]",
          "correct_output": "[1, 5, 0, 5, 1]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              1,
              3,
              1
            ]
          ],
          "fixed_output": "[1, 4, 1]",
          "correct_output": "[1, 4, 1]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              4,
              7,
              2,
              5,
              5,
              2,
              7,
              4
            ]
          ],
          "fixed_output": "[4, 7, 2, 6, 6, 2, 7, 4]",
          "correct_output": "[4, 7, 2, 6, 6, 2, 7, 4]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              4,
              7,
              2,
              5,
              2,
              7,
              4
            ]
          ],
          "fixed_output": "[4, 7, 2, 6, 2, 7, 4]",
          "correct_output": "[4, 7, 2, 6, 2, 7, 4]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              9,
              9,
              9
            ]
          ],
          "fixed_output": "[1, 0, 0, 0, 1]",
          "correct_output": "[1, 0, 0, 1]",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "next_permutation",
      "status": "success",
      "total_tests": 8,
      "passed_tests": 8,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "COMPARISON_OPERATOR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              3,
              2,
              4,
              1
            ]
          ],
          "fixed_output": "[3, 4, 1, 2]",
          "correct_output": "[3, 4, 1, 2]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3,
              5,
              6,
              2,
              1
            ]
          ],
          "fixed_output": "[3, 6, 1, 2, 5]",
          "correct_output": "[3, 6, 1, 2, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              3,
              5,
              6,
              2
            ]
          ],
          "fixed_output": "[3, 6, 2, 5]",
          "correct_output": "[3, 6, 2, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              4,
              5,
              1,
              7,
              9
            ]
          ],
          "fixed_output": "[4, 5, 1, 9, 7]",
          "correct_output": "[4, 5, 1, 9, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              4,
              5,
              8,
              7,
              1
            ]
          ],
          "fixed_output": "[4, 7, 1, 5, 8]",
          "correct_output": "[4, 7, 1, 5, 8]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              9,
              5,
              2,
              6,
              1
            ]
          ],
          "fixed_output": "[9, 5, 6, 1, 2]",
          "correct_output": "[9, 5, 6, 1, 2]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              44,
              5,
              1,
              7,
              9
            ]
          ],
          "fixed_output": "[44, 5, 1, 9, 7]",
          "correct_output": "[44, 5, 1, 9, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            [
              3,
              4,
              5
            ]
          ],
          "fixed_output": "[3, 5, 4]",
          "correct_output": "[3, 5, 4]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "node",
      "status": "missing_tests",
      "tests": []
    },
    {
      "program": "pascal",
      "status": "failed",
      "total_tests": 5,
      "passed_tests": 1,
      "success_rate": 0.2,
      "timeout_count": 0,
      "defect_type": "OFF_BY_ONE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            1
          ],
          "fixed_output": "[[1]]",
          "correct_output": "[[1]]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            2
          ],
          "fixed_output": "[[1], [0]]",
          "correct_output": "[[1], [1, 1]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            3
          ],
          "fixed_output": "[[1], [0], [0, 0]]",
          "correct_output": "[[1], [1, 1], [1, 2, 1]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            4
          ],
          "fixed_output": "[[1], [0], [0, 0], [0, 0, 0]]",
          "correct_output": "[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            5
          ],
          "fixed_output": "[[1], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0]]",
          "correct_output": "[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "possible_change",
      "status": "failed",
      "total_tests": 10,
      "passed_tests": 1,
      "success_rate": 0.1,
      "timeout_count": 0,
      "defect_type": "ARGUMENT_ORDER",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              1,
              4,
              2
            ],
            -7
          ],
          "fixed_output": "0",
          "correct_output": "0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              1,
              5,
              10,
              25
            ],
            11
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "4",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              1,
              5,
              10,
              25
            ],
            75
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "121",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              1,
              5,
              10,
              25
            ],
            34
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "18",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              1,
              5,
              10
            ],
            34
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "16",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              1,
              5,
              10,
              25
            ],
            140
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "568",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              1,
              5,
              10,
              25,
              50
            ],
            140
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "786",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            [
              1,
              5,
              10,
              25,
              50,
              100
            ],
            140
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "817",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            [
              1,
              3,
              7,
              42,
              78
            ],
            140
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "981",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            [
              3,
              7,
              42,
              78
            ],
            140
          ],
          "fixed_output": "Error: ValueError: not enough values to unpack (expected at least 1, got 0)",
          "correct_output": "20",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "powerset",
      "status": "failed",
      "total_tests": 5,
      "passed_tests": 1,
      "success_rate": 0.2,
      "timeout_count": 0,
      "defect_type": "MISSING_STATEMENT",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              "a",
              "b",
              "c"
            ]
          ],
          "fixed_output": "[['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['a'], ['b', 'c'], ['b'], ['c'], []]",
          "correct_output": "[[], ['c'], ['b'], ['b', 'c'], ['a'], ['a', 'c'], ['a', 'b'], ['a', 'b', 'c']]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              "a",
              "b"
            ]
          ],
          "fixed_output": "[['a', 'b'], ['a'], ['b'], []]",
          "correct_output": "[[], ['b'], ['a'], ['a', 'b']]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              "a"
            ]
          ],
          "fixed_output": "[['a'], []]",
          "correct_output": "[[], ['a']]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            []
          ],
          "fixed_output": "[[]]",
          "correct_output": "[[]]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              "x",
              "df",
              "z",
              "m"
            ]
          ],
          "fixed_output": "[['x', 'df', 'z', 'm'], ['x', 'df', 'z'], ['x', 'df', 'm'], ['x', 'df'], ['x', 'z', 'm'], ['x', 'z'], ['x', 'm'], ['x'], ['df', 'z', 'm'], ['df', 'z'], ['df', 'm'], ['df'], ['z', 'm'], ['z'], ['m'], []]",
          "correct_output": "[[], ['m'], ['z'], ['z', 'm'], ['df'], ['df', 'm'], ['df', 'z'], ['df', 'z', 'm'], ['x'], ['x', 'm'], ['x', 'z'], ['x', 'z', 'm'], ['x', 'df'], ['x', 'df', 'm'], ['x', 'df', 'z'], ['x', 'df', 'z', 'm']]",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "quicksort",
      "status": "success",
      "total_tests": 13,
      "passed_tests": 13,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "COMPARISON_OPERATOR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              1,
              2,
              6,
              72,
              7,
              33,
              4
            ]
          ],
          "fixed_output": "[1, 2, 4, 6, 7, 33, 72]",
          "correct_output": "[1, 2, 4, 6, 7, 33, 72]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              3,
              1,
              4,
              1,
              5,
              9,
              2,
              6,
              5,
              3,
              5,
              8,
              9,
              7,
              9,
              3
            ]
          ],
          "fixed_output": "[1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9]",
          "correct_output": "[1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              5,
              4,
              3,
              2,
              1
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              5,
              4,
              3,
              1,
              2
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              8,
              1,
              14,
              9,
              15,
              5,
              4,
              3,
              7,
              17,
              11,
              18,
              2,
              12,
              16,
              13,
              6,
              10
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              9,
              4,
              5,
              2,
              17,
              14,
              10,
              6,
              15,
              8,
              12,
              13,
              16,
              3,
              1,
              7,
              11
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            [
              13,
              14,
              7,
              16,
              9,
              5,
              24,
              21,
              19,
              17,
              12,
              10,
              1,
              15,
              23,
              25,
              11,
              3,
              2,
              6,
              22,
              8,
              20,
              4,
              18
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            [
              8,
              5,
              15,
              7,
              9,
              14,
              11,
              12,
              10,
              6,
              2,
              4,
              13,
              1,
              3
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            [
              4,
              3,
              7,
              6,
              5,
              2,
              1
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            [
              4,
              3,
              1,
              5,
              2
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5]",
          "correct_output": "[1, 2, 3, 4, 5]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 11,
          "input": [
            [
              5,
              4,
              2,
              3,
              6,
              7,
              1
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 12,
          "input": [
            [
              10,
              16,
              6,
              1,
              14,
              19,
              15,
              2,
              9,
              4,
              18,
              17,
              12,
              3,
              11,
              8,
              13,
              5,
              7
            ]
          ],
          "fixed_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 13,
          "input": [
            [
              10,
              16,
              6,
              1,
              14,
              19,
              15,
              2,
              9,
              4,
              18
            ]
          ],
          "fixed_output": "[1, 2, 4, 6, 9, 10, 14, 15, 16, 18, 19]",
          "correct_output": "[1, 2, 4, 6, 9, 10, 14, 15, 16, 18, 19]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "reverse_linked_list",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "rpn_eval",
      "status": "success",
      "total_tests": 6,
      "passed_tests": 6,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "ARGUMENT_ORDER",
      "tests": [
        {
          "test_num": 1,
          "input": [
            [
              3.0,
              5.0,
              "+",
              2.0,
              "/"
            ]
          ],
          "fixed_output": "4.0",
          "correct_output": "4.0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              2.0,
              2.0,
              "+"
            ]
          ],
          "fixed_output": "4.0",
          "correct_output": "4.0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              7.0,
              4.0,
              "+",
              3.0,
              "-"
            ]
          ],
          "fixed_output": "8.0",
          "correct_output": "8.0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              1.0,
              2.0,
              "*",
              3.0,
              4.0,
              "*",
              "+"
            ]
          ],
          "fixed_output": "14.0",
          "correct_output": "14.0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              5.0,
              9.0,
              2.0,
              "*",
              "+"
            ]
          ],
          "fixed_output": "23.0",
          "correct_output": "23.0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              5.0,
              1.0,
              2.0,
              "+",
              4.0,
              "*",
              "+",
              3.0,
              "-"
            ]
          ],
          "fixed_output": "14.0",
          "correct_output": "14.0",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "shortest_path_length",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "shortest_path_lengths",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "shortest_paths",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "shunting_yard",
      "status": "failed",
      "total_tests": 6,
      "passed_tests": 2,
      "success_rate": 0.3333333333333333,
      "timeout_count": 0,
      "defect_type": "MISSING_CONDITION",
      "tests": [
        {
          "test_num": 1,
          "input": [
            []
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            [
              30
            ]
          ],
          "fixed_output": "[30]",
          "correct_output": "[30]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            [
              10,
              "-",
              5,
              "-",
              2
            ]
          ],
          "fixed_output": "[10, 5, 2]",
          "correct_output": "[10, 5, '-', 2, '-']",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            [
              34,
              "-",
              12,
              "/",
              5
            ]
          ],
          "fixed_output": "[34, 12, 5]",
          "correct_output": "[34, 12, 5, '/', '-']",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            [
              4,
              "+",
              9,
              "*",
              9,
              "-",
              10,
              "+",
              13
            ]
          ],
          "fixed_output": "[4, 9, 9, 10, 13]",
          "correct_output": "[4, 9, 9, '*', '+', 10, '-', 13, '+']",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            [
              7,
              "*",
              43,
              "-",
              7,
              "+",
              13,
              "/",
              7
            ]
          ],
          "fixed_output": "[7, 43, 7, 13, 7]",
          "correct_output": "[7, 43, '*', 7, '-', 13, 7, '/', '+']",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "sieve",
      "status": "success",
      "total_tests": 6,
      "passed_tests": 6,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "LOGICAL_OPERATOR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            1
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            2
          ],
          "fixed_output": "[2]",
          "correct_output": "[2]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            4
          ],
          "fixed_output": "[2, 3]",
          "correct_output": "[2, 3]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            7
          ],
          "fixed_output": "[2, 3, 5, 7]",
          "correct_output": "[2, 3, 5, 7]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            20
          ],
          "fixed_output": "[2, 3, 5, 7, 11, 13, 17, 19]",
          "correct_output": "[2, 3, 5, 7, 11, 13, 17, 19]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            50
          ],
          "fixed_output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
          "correct_output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "sqrt",
      "status": "success",
      "total_tests": 7,
      "passed_tests": 7,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "ARITHMETIC_ERROR",
      "tests": [
        {
          "test_num": 1,
          "input": [
            2,
            0.01
          ],
          "fixed_output": "1.4166666666666665",
          "correct_output": "1.4166666666666665",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            2,
            0.5
          ],
          "fixed_output": "1.5",
          "correct_output": "1.5",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            2,
            0.3
          ],
          "fixed_output": "1.5",
          "correct_output": "1.5",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            4,
            0.2
          ],
          "fixed_output": "2.0",
          "correct_output": "2.0",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            27,
            0.01
          ],
          "fixed_output": "5.196176253962744",
          "correct_output": "5.196176253962744",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            33,
            0.05
          ],
          "fixed_output": "5.744665154617621",
          "correct_output": "5.744665154617621",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            170,
            0.03
          ],
          "fixed_output": "13.038404876679632",
          "correct_output": "13.038404876679632",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "subsequences",
      "status": "failed",
      "total_tests": 12,
      "passed_tests": 2,
      "success_rate": 0.16666666666666666,
      "timeout_count": 0,
      "defect_type": "OFF_BY_ONE",
      "tests": [
        {
          "test_num": 1,
          "input": [
            1,
            5,
            3
          ],
          "fixed_output": "[]",
          "correct_output": "[[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            30,
            -2,
            3
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            30,
            2,
            3
          ],
          "fixed_output": "[]",
          "correct_output": "[]",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            4,
            10,
            4
          ],
          "fixed_output": "[]",
          "correct_output": "[[4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 6, 9], [4, 5, 7, 8], [4, 5, 7, 9], [4, 5, 8, 9], [4, 6, 7, 8], [4, 6, 7, 9], [4, 6, 8, 9], [4, 7, 8, 9], [5, 6, 7, 8], [5, 6, 7, 9], [5, 6, 8, 9], [5, 7, 8, 9], [6, 7, 8, 9]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            4,
            10,
            6
          ],
          "fixed_output": "[]",
          "correct_output": "[[4, 5, 6, 7, 8, 9]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            1,
            10,
            2
          ],
          "fixed_output": "[]",
          "correct_output": "[[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 6], [5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9], [7, 8], [7, 9], [8, 9]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            1,
            10,
            6
          ],
          "fixed_output": "[]",
          "correct_output": "[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 9], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 8, 9], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 6, 9], [1, 2, 3, 5, 7, 8], [1, 2, 3, 5, 7, 9], [1, 2, 3, 5, 8, 9], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 9], [1, 2, 3, 6, 8, 9], [1, 2, 3, 7, 8, 9], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 9], [1, 2, 4, 5, 7, 8], [1, 2, 4, 5, 7, 9], [1, 2, 4, 5, 8, 9], [1, 2, 4, 6, 7, 8], [1, 2, 4, 6, 7, 9], [1, 2, 4, 6, 8, 9], [1, 2, 4, 7, 8, 9], [1, 2, 5, 6, 7, 8], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 8, 9], [1, 2, 5, 7, 8, 9], [1, 2, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 9], [1, 3, 4, 5, 7, 8], [1, 3, 4, 5, 7, 9], [1, 3, 4, 5, 8, 9], [1, 3, 4, 6, 7, 8], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 8, 9], [1, 3, 4, 7, 8, 9], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 9], [1, 3, 5, 6, 8, 9], [1, 3, 5, 7, 8, 9], [1, 3, 6, 7, 8, 9], [1, 4, 5, 6, 7, 8], [1, 4, 5, 6, 7, 9], [1, 4, 5, 6, 8, 9], [1, 4, 5, 7, 8, 9], [1, 4, 6, 7, 8, 9], [1, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 6, 9], [2, 3, 4, 5, 7, 8], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 8, 9], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 7, 9], [2, 3, 4, 6, 8, 9], [2, 3, 4, 7, 8, 9], [2, 3, 5, 6, 7, 8], [2, 3, 5, 6, 7, 9], [2, 3, 5, 6, 8, 9], [2, 3, 5, 7, 8, 9], [2, 3, 6, 7, 8, 9], [2, 4, 5, 6, 7, 8], [2, 4, 5, 6, 7, 9], [2, 4, 5, 6, 8, 9], [2, 4, 5, 7, 8, 9], [2, 4, 6, 7, 8, 9], [2, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 9], [3, 4, 5, 6, 8, 9], [3, 4, 5, 7, 8, 9], [3, 4, 6, 7, 8, 9], [3, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            1,
            10,
            4
          ],
          "fixed_output": "[]",
          "correct_output": "[[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 3, 9], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 4, 9], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 5, 9], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 6, 9], [1, 2, 7, 8], [1, 2, 7, 9], [1, 2, 8, 9], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 4, 9], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 5, 9], [1, 3, 6, 7], [1, 3, 6, 8], [1, 3, 6, 9], [1, 3, 7, 8], [1, 3, 7, 9], [1, 3, 8, 9], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 5, 9], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 6, 9], [1, 4, 7, 8], [1, 4, 7, 9], [1, 4, 8, 9], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 6, 9], [1, 5, 7, 8], [1, 5, 7, 9], [1, 5, 8, 9], [1, 6, 7, 8], [1, 6, 7, 9], [1, 6, 8, 9], [1, 7, 8, 9], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 4, 9], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 5, 9], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 6, 9], [2, 3, 7, 8], [2, 3, 7, 9], [2, 3, 8, 9], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 5, 9], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 6, 9], [2, 4, 7, 8], [2, 4, 7, 9], [2, 4, 8, 9], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 6, 9], [2, 5, 7, 8], [2, 5, 7, 9], [2, 5, 8, 9], [2, 6, 7, 8], [2, 6, 7, 9], [2, 6, 8, 9], [2, 7, 8, 9], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 5, 9], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 6, 9], [3, 4, 7, 8], [3, 4, 7, 9], [3, 4, 8, 9], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 6, 9], [3, 5, 7, 8], [3, 5, 7, 9], [3, 5, 8, 9], [3, 6, 7, 8], [3, 6, 7, 9], [3, 6, 8, 9], [3, 7, 8, 9], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 6, 9], [4, 5, 7, 8], [4, 5, 7, 9], [4, 5, 8, 9], [4, 6, 7, 8], [4, 6, 7, 9], [4, 6, 8, 9], [4, 7, 8, 9], [5, 6, 7, 8], [5, 6, 7, 9], [5, 6, 8, 9], [5, 7, 8, 9], [6, 7, 8, 9]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            1,
            10,
            1
          ],
          "fixed_output": "[]",
          "correct_output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            5,
            13,
            7
          ],
          "fixed_output": "[]",
          "correct_output": "[[5, 6, 7, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10, 12], [5, 6, 7, 8, 9, 11, 12], [5, 6, 7, 8, 10, 11, 12], [5, 6, 7, 9, 10, 11, 12], [5, 6, 8, 9, 10, 11, 12], [5, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 11,
          "input": [
            5,
            13,
            0
          ],
          "fixed_output": "[]",
          "correct_output": "[[]]",
          "passed": false,
          "timeout": false
        },
        {
          "test_num": 12,
          "input": [
            1,
            5,
            0
          ],
          "fixed_output": "[]",
          "correct_output": "[[]]",
          "passed": false,
          "timeout": false
        }
      ]
    },
    {
      "program": "to_base",
      "status": "success",
      "total_tests": 10,
      "passed_tests": 10,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "INCORRECT_RETURN",
      "tests": [
        {
          "test_num": 1,
          "input": [
            8227,
            18
          ],
          "fixed_output": "1771",
          "correct_output": "1771",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            73,
            8
          ],
          "fixed_output": "111",
          "correct_output": "111",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            16,
            19
          ],
          "fixed_output": "G",
          "correct_output": "G",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            31,
            16
          ],
          "fixed_output": "1F",
          "correct_output": "1F",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            41,
            2
          ],
          "fixed_output": "101001",
          "correct_output": "101001",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 6,
          "input": [
            44,
            5
          ],
          "fixed_output": "134",
          "correct_output": "134",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 7,
          "input": [
            27,
            23
          ],
          "fixed_output": "14",
          "correct_output": "14",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 8,
          "input": [
            56,
            23
          ],
          "fixed_output": "2A",
          "correct_output": "2A",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 9,
          "input": [
            8237,
            24
          ],
          "fixed_output": "E75",
          "correct_output": "E75",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 10,
          "input": [
            8237,
            34
          ],
          "fixed_output": "749",
          "correct_output": "749",
          "passed": true,
          "timeout": false
        }
      ]
    },
    {
      "program": "topological_ordering",
      "status": "success",
      "test_type": "graph_based",
      "success_rate": 1.0,
      "defect_type": "GRAPH_BASED",
      "tests": []
    },
    {
      "program": "wrap",
      "status": "success",
      "total_tests": 5,
      "passed_tests": 5,
      "success_rate": 1.0,
      "timeout_count": 0,
      "defect_type": "MISSING_STATEMENT",
      "tests": [
        {
          "test_num": 1,
          "input": [
            "The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.",
            50
          ],
          "fixed_output": "['The leaves did not stir on the trees, grasshoppers', ' chirruped, and the monotonous hollow sound of the', ' sea rising up from below, spoke of the peace, of', ' the eternal sleep awaiting us. So it must have', ' sounded when there was no Yalta, no Oreanda here;', ' so it sounds now, and it will sound as', ' indifferently and monotonously when we are all no', ' more. And in this constancy, in this complete', ' indifference to the life and death of each of us,', ' there lies hid, perhaps, a pledge of our eternal', ' salvation, of the unceasing movement of life upon', ' earth, of unceasing progress towards perfection.', ' Sitting beside a young woman who in the dawn', ' seemed so lovely, soothed and spellbound in these', ' magical surroundings - the sea, mountains,', ' clouds, the open sky - Gurov thought how in', ' reality everything is beautiful in this world', ' when one reflects: everything except what we', ' think or do ourselves when we forget our human', ' dignity and the higher aims of our existence.']",
          "correct_output": "['The leaves did not stir on the trees, grasshoppers', ' chirruped, and the monotonous hollow sound of the', ' sea rising up from below, spoke of the peace, of', ' the eternal sleep awaiting us. So it must have', ' sounded when there was no Yalta, no Oreanda here;', ' so it sounds now, and it will sound as', ' indifferently and monotonously when we are all no', ' more. And in this constancy, in this complete', ' indifference to the life and death of each of us,', ' there lies hid, perhaps, a pledge of our eternal', ' salvation, of the unceasing movement of life upon', ' earth, of unceasing progress towards perfection.', ' Sitting beside a young woman who in the dawn', ' seemed so lovely, soothed and spellbound in these', ' magical surroundings - the sea, mountains,', ' clouds, the open sky - Gurov thought how in', ' reality everything is beautiful in this world', ' when one reflects: everything except what we', ' think or do ourselves when we forget our human', ' dignity and the higher aims of our existence.']",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 2,
          "input": [
            "The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.",
            20
          ],
          "fixed_output": "['The leaves did not', ' stir on the trees,', ' grasshoppers', ' chirruped, and the', ' monotonous hollow', ' sound of the sea', ' rising up from', ' below, spoke of the', ' peace, of the', ' eternal sleep', ' awaiting us. So it', ' must have sounded', ' when there was no', ' Yalta, no Oreanda', ' here; so it sounds', ' now, and it will', ' sound as', ' indifferently and', ' monotonously when', ' we are all no more.', ' And in this', ' constancy, in this', ' complete', ' indifference to the', ' life and death of', ' each of us, there', ' lies hid, perhaps,', ' a pledge of our', ' eternal salvation,', ' of the unceasing', ' movement of life', ' upon earth, of', ' unceasing progress', ' towards perfection.', ' Sitting beside a', ' young woman who in', ' the dawn seemed so', ' lovely, soothed and', ' spellbound in these', ' magical', ' surroundings - the', ' sea, mountains,', ' clouds, the open', ' sky - Gurov thought', ' how in reality', ' everything is', ' beautiful in this', ' world when one', ' reflects:', ' everything except', ' what we think or do', ' ourselves when we', ' forget our human', ' dignity and the', ' higher aims of our', ' existence.']",
          "correct_output": "['The leaves did not', ' stir on the trees,', ' grasshoppers', ' chirruped, and the', ' monotonous hollow', ' sound of the sea', ' rising up from', ' below, spoke of the', ' peace, of the', ' eternal sleep', ' awaiting us. So it', ' must have sounded', ' when there was no', ' Yalta, no Oreanda', ' here; so it sounds', ' now, and it will', ' sound as', ' indifferently and', ' monotonously when', ' we are all no more.', ' And in this', ' constancy, in this', ' complete', ' indifference to the', ' life and death of', ' each of us, there', ' lies hid, perhaps,', ' a pledge of our', ' eternal salvation,', ' of the unceasing', ' movement of life', ' upon earth, of', ' unceasing progress', ' towards perfection.', ' Sitting beside a', ' young woman who in', ' the dawn seemed so', ' lovely, soothed and', ' spellbound in these', ' magical', ' surroundings - the', ' sea, mountains,', ' clouds, the open', ' sky - Gurov thought', ' how in reality', ' everything is', ' beautiful in this', ' world when one', ' reflects:', ' everything except', ' what we think or do', ' ourselves when we', ' forget our human', ' dignity and the', ' higher aims of our', ' existence.']",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 3,
          "input": [
            "The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.",
            80
          ],
          "fixed_output": "['The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous', ' hollow sound of the sea rising up from below, spoke of the peace, of the', ' eternal sleep awaiting us. So it must have sounded when there was no Yalta, no', ' Oreanda here; so it sounds now, and it will sound as indifferently and', ' monotonously when we are all no more. And in this constancy, in this complete', ' indifference to the life and death of each of us, there lies hid, perhaps, a', ' pledge of our eternal salvation, of the unceasing movement of life upon earth,', ' of unceasing progress towards perfection. Sitting beside a young woman who in', ' the dawn seemed so lovely, soothed and spellbound in these magical surroundings', ' - the sea, mountains, clouds, the open sky - Gurov thought how in reality', ' everything is beautiful in this world when one reflects: everything except what', ' we think or do ourselves when we forget our human dignity and the higher aims', ' of our existence.']",
          "correct_output": "['The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous', ' hollow sound of the sea rising up from below, spoke of the peace, of the', ' eternal sleep awaiting us. So it must have sounded when there was no Yalta, no', ' Oreanda here; so it sounds now, and it will sound as indifferently and', ' monotonously when we are all no more. And in this constancy, in this complete', ' indifference to the life and death of each of us, there lies hid, perhaps, a', ' pledge of our eternal salvation, of the unceasing movement of life upon earth,', ' of unceasing progress towards perfection. Sitting beside a young woman who in', ' the dawn seemed so lovely, soothed and spellbound in these magical surroundings', ' - the sea, mountains, clouds, the open sky - Gurov thought how in reality', ' everything is beautiful in this world when one reflects: everything except what', ' we think or do ourselves when we forget our human dignity and the higher aims', ' of our existence.']",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 4,
          "input": [
            "The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.",
            77
          ],
          "fixed_output": "['The leaves did not stir on the trees, grasshoppers chirruped, and the', ' monotonous hollow sound of the sea rising up from below, spoke of the peace,', ' of the eternal sleep awaiting us. So it must have sounded when there was no', ' Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently', ' and monotonously when we are all no more. And in this constancy, in this', ' complete indifference to the life and death of each of us, there lies hid,', ' perhaps, a pledge of our eternal salvation, of the unceasing movement of', ' life upon earth, of unceasing progress towards perfection. Sitting beside a', ' young woman who in the dawn seemed so lovely, soothed and spellbound in', ' these magical surroundings - the sea, mountains, clouds, the open sky -', ' Gurov thought how in reality everything is beautiful in this world when one', ' reflects: everything except what we think or do ourselves when we forget our', ' human dignity and the higher aims of our existence.']",
          "correct_output": "['The leaves did not stir on the trees, grasshoppers chirruped, and the', ' monotonous hollow sound of the sea rising up from below, spoke of the peace,', ' of the eternal sleep awaiting us. So it must have sounded when there was no', ' Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently', ' and monotonously when we are all no more. And in this constancy, in this', ' complete indifference to the life and death of each of us, there lies hid,', ' perhaps, a pledge of our eternal salvation, of the unceasing movement of', ' life upon earth, of unceasing progress towards perfection. Sitting beside a', ' young woman who in the dawn seemed so lovely, soothed and spellbound in', ' these magical surroundings - the sea, mountains, clouds, the open sky -', ' Gurov thought how in reality everything is beautiful in this world when one', ' reflects: everything except what we think or do ourselves when we forget our', ' human dignity and the higher aims of our existence.']",
          "passed": true,
          "timeout": false
        },
        {
          "test_num": 5,
          "input": [
            "The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.",
            140
          ],
          "fixed_output": "['The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the', ' peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will', ' sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death', ' of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing', ' progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical', ' surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one', ' reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.']",
          "correct_output": "['The leaves did not stir on the trees, grasshoppers chirruped, and the monotonous hollow sound of the sea rising up from below, spoke of the', ' peace, of the eternal sleep awaiting us. So it must have sounded when there was no Yalta, no Oreanda here; so it sounds now, and it will', ' sound as indifferently and monotonously when we are all no more. And in this constancy, in this complete indifference to the life and death', ' of each of us, there lies hid, perhaps, a pledge of our eternal salvation, of the unceasing movement of life upon earth, of unceasing', ' progress towards perfection. Sitting beside a young woman who in the dawn seemed so lovely, soothed and spellbound in these magical', ' surroundings - the sea, mountains, clouds, the open sky - Gurov thought how in reality everything is beautiful in this world when one', ' reflects: everything except what we think or do ourselves when we forget our human dignity and the higher aims of our existence.']",
          "passed": true,
          "timeout": false
        }
      ]
    }
  ]
}